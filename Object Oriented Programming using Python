{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **1.Class**\n",
        "\n",
        "**.**A class is a user-defined prototype from which objects are created\n",
        "\n",
        "\n",
        "**.**Classes are created by keyword class *italicized text*\n",
        "\n",
        "\n",
        "**.**Attributes are the variables that belong to a class\n",
        "\n",
        "\n",
        "\n",
        "syntax\n",
        "\n",
        "\n",
        "```\n",
        "class ClassName:\n",
        "    # Statement-1\n",
        "    .\n",
        "    .\n",
        "    .\n",
        "    #Statement-N\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "SWZxZ1mgT1l_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Person:\n",
        "  def __init__(self,name,age):\n",
        "      self.name = name\n",
        "      self.age= age\n",
        "\n",
        "p1= Person(\"Ashitha\",19)\n",
        "\n",
        "print(p1.name)\n",
        "print(p1.age)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wi1gMIXzbQ3Y",
        "outputId": "8f94980a-a5bd-44f4-9018-3e12d0becc0e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ashitha\n",
            "19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2.Objects**\n",
        "\n",
        "**.**An object is an instance of class\n",
        "\n",
        "\n",
        "**.**Objects are basically an encapsulation of data variables and methods acting on that data into a single entity\n",
        "\n",
        "\n",
        "Syntax\n",
        "\n",
        "```\n",
        "# <object-name>=<class-name>(<arguments>)\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "v1CBFxBZcIV1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class College:\n",
        "  def __init__(self,name,age):\n",
        "      self.name = name\n",
        "      self.age = age\n",
        "\n",
        "\n",
        "p1=College(\"Ashitha\",19)\n",
        "p2=College(\"Siya\",18)\n",
        "\n",
        "print(p1.name,p1.age)\n",
        "print(p2.name,p2.age)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JPkVxy0UfWmP",
        "outputId": "8888b638-4333-4aba-ef08-1d922acff596"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ashitha 19\n",
            "Siya 18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **3.Public Variables**\n",
        "\n",
        "**.**The members of a class that are declared public are easily accessible\n",
        "\n",
        "**.**All data members and member functions of a class are public by default\n",
        "\n",
        "\n",
        "Syntax\n",
        "\n",
        "```\n",
        "# All python variables and methods are public by default in python.So there is no syntax.\n",
        "\n",
        "class Classname:\n",
        "\n",
        "# Statement-1\n",
        "\n",
        "    #public data members\n",
        "\n",
        "#public member function\n",
        "    .\n",
        "    .\n",
        "    .\n",
        "\n",
        "\n",
        "    #Statement-N\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "r8LYtsUQh_w1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class College:\n",
        "      \n",
        "     \n",
        "     def __init__(self, name, age):\n",
        "           \n",
        "           \n",
        "           self.collegeName = name\n",
        "           self.collegeAge = age\n",
        " \n",
        "        \n",
        "     def displayAge(self):\n",
        "           \n",
        "           \n",
        "           print(\"Age: \", self.collegeAge)\n",
        " \n",
        "\n",
        "obj = College(\"Ashitha\", 19)\n",
        " \n",
        "\n",
        "print(\"Name: \", obj.collegeName)\n",
        "\n",
        "obj.displayAge()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IdA3cWnOncVJ",
        "outputId": "3ebc0b39-1383-4693-9b02-21fa001b077d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name:  Ashitha\n",
            "Age:  19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4.Private Variables**\n",
        "\n",
        "**.**Members of a class that are declared private are accessible within the class only\n",
        "\n",
        "**.**It is the most secure access modifier\n",
        "\n",
        "Syntax\n",
        "\n",
        "\n",
        "```\n",
        "# Data members of a class are declared private by adding a' __'(double underscore).\n",
        "\n",
        "class Classname:\n",
        "\n",
        "# private members\n",
        "\n",
        "    #Statement-1\n",
        "\n",
        "# private member function\n",
        "    .\n",
        "    .\n",
        "    .\n",
        "\n",
        "\n",
        "    #Statement-N\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "K-2wKGfpoyJJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class College:\n",
        "    \n",
        "     \n",
        "     __name = None\n",
        "     __roll = None\n",
        "     __branch = None\n",
        " \n",
        "     \n",
        "     def __init__(self, name, roll, branch): \n",
        "          self.__name = name\n",
        "          self.__roll = roll\n",
        "          self.__branch = branch\n",
        " \n",
        "      \n",
        "     def __displayDetails(self):\n",
        "           \n",
        "           \n",
        "           print(\"Name: \", self.__name)\n",
        "           print(\"Roll: \", self.__roll)\n",
        "           print(\"Branch: \", self.__branch)\n",
        "    \n",
        "     \n",
        "     def accessPrivateFunction(self):\n",
        "            \n",
        "           \n",
        "           self.__displayDetails() \n",
        " \n",
        "   \n",
        "obj = College(\"Ashitha\", 1706256, \"Computer Science\")\n",
        " \n",
        "\n",
        "obj.accessPrivateFunction()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I9sjjzZMp6mJ",
        "outputId": "adf5b563-822c-4771-b217-8789d811f112"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name:  Ashitha\n",
            "Roll:  1706256\n",
            "Branch:  Computer Science\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **5.Protected Variables**\n",
        "\n",
        "**.**Members of a class that are declared protected are only accessible to a class derived from it.\n",
        "\n",
        "Syntax\n",
        "\n",
        "\n",
        "```\n",
        "Data members of a class are declared by adding a '_'(single underscore).\n",
        "\n",
        "class Classname:\n",
        "\n",
        "# protected data members\n",
        "\n",
        "    #Statement-1\n",
        "\n",
        "# protected member function\n",
        "    .\n",
        "    .\n",
        "    .\n",
        "\n",
        "\n",
        "    #Statement-N\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ysPsAOE4stpb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Student:\n",
        "    \n",
        "     \n",
        "     _name = None\n",
        "     _roll = None\n",
        "     _branch = None\n",
        "    \n",
        "     \n",
        "     def __init__(self, name, roll, branch): \n",
        "          self._name = name\n",
        "          self._roll = roll\n",
        "          self._branch = branch\n",
        "    \n",
        "      \n",
        "     def _displayRollAndBranch(self):\n",
        " \n",
        "          \n",
        "          print(\"Roll: \", self._roll)\n",
        "          print(\"Branch: \", self._branch)\n",
        " \n",
        " \n",
        "\n",
        "class College(Student):\n",
        " \n",
        "       # constructor\n",
        "       def __init__(self, name, roll, branch):\n",
        "                Student.__init__(self, name, roll, branch)\n",
        "         \n",
        "       \n",
        "       def displayDetails(self):\n",
        "                   \n",
        "                 \n",
        "                print(\"Name: \", self._name)\n",
        "                   \n",
        "                 \n",
        "                self._displayRollAndBranch()\n",
        " \n",
        "# creating objects of the derived\n",
        "obj=College(\"Ashitha\", 1706256, \"Computer Science\")\n",
        " \n",
        "\n",
        "obj.displayDetails()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x_TUiQ4MuFCn",
        "outputId": "4e5da75b-fb90-495a-9474-75681dc44bcb"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name:  Ashitha\n",
            "Roll:  1706256\n",
            "Branch:  Computer Science\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **6.Inheritance**\n",
        "\n",
        "Inheritance allows to define a class that inherits all that methods and properties from another class.\n",
        "\n",
        "**Parent** **class** is the class being inherited from,also called base class.\n",
        "\n",
        "**Child class** is the class that inherits from another class,also called derived class \n",
        "\n",
        "Syntax\n",
        "\n",
        "```\n",
        "class Classname(object):\n",
        "\n",
        "# Statement-1\n",
        "  .\n",
        "  .\n",
        "  .\n",
        "#Inherited or Subclass\n",
        "    .\n",
        "    .\n",
        "    .\n",
        "\n",
        "\n",
        "    #Statement-N\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "kp_-C0Qrva5K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Person(object):\n",
        "      \n",
        "    \n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "  \n",
        "    \n",
        "    def getName(self):\n",
        "        return self.name\n",
        "  \n",
        "    def isEmployee(self):\n",
        "        return False\n",
        "  \n",
        "  \n",
        "\n",
        "class Employee(Person):\n",
        "  \n",
        "    # Here we return true\n",
        "    def isEmployee(self):\n",
        "        return True\n",
        "  \n",
        "\n",
        "emp = Person(\"Company1\")  \n",
        "print(emp.getName(), emp.isEmployee())\n",
        "  \n",
        "emp = Employee(\"Company2\") \n",
        "print(emp.getName(), emp.isEmployee())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eopjarAwyqbW",
        "outputId": "4a224ee3-fb5b-43ee-a576-a0a52d41f833"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Company1 False\n",
            "Company2 True\n"
          ]
        }
      ]
    }
  ]
}
